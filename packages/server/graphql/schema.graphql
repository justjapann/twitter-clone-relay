"""
Root query
"""
type Query {
  """
  Fetches an object given its ID
  """
  node(
    """
    The ID of an object
    """
    id: ID!
  ): Node

  """
  Fetches objects given their IDs
  """
  nodes(
    """
    The IDs of objects
    """
    ids: [ID!]!
  ): [Node]!
  posts(after: String, first: Int, before: String, last: Int): PostConnection!
  queryUser(username: String): User
  userRegisterMutation(input: UserRegisterInput!): UserRegisterPayload
  userLoginMutation(input: UserLoginInput!): UserLoginPayload
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge
  """
  node: Post

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Post Type
"""
type Post {
  id: String
  body: String
}

type User implements Node {
  """
  The ID of an object
  """
  id: ID!
  username: String!
  displayName: String
  email: String!
  password: String!
}

type UserRegisterPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserRegisterInput {
  username: String!
  displayName: String
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserLoginInput {
  username: String!
  password: String!
  clientMutationId: String
}

type Mutation {
  CreatePost(input: CreatePostInput!): CreatePostPayload
  DeletePost(input: DeletePostInput!): DeletePostPayload
  UpdatePost(input: UpdatePostInput!): UpdatePostPayload
  userRegisterMutation(input: UserRegisterInput!): UserRegisterPayload
  userLoginMutation(input: UserLoginInput!): UserLoginPayload
}

type CreatePostPayload {
  postEdge: PostEdge
  error: String
  clientMutationId: String
}

input CreatePostInput {
  body: String!
  clientMutationId: String
}

type DeletePostPayload {
  error: String
  success: String
  clientMutationId: String
}

input DeletePostInput {
  id: String!
  clientMutationId: String
}

type UpdatePostPayload {
  postEdge: PostEdge
  error: String
  clientMutationId: String
}

input UpdatePostInput {
  id: String!
  body: String!
  clientMutationId: String
}
