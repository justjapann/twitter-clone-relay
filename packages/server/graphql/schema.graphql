"""
The root of all queries
"""
type Query {
  posts(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): PostConnection!
  allUsers: [User]
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [PostEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge
  """
  node: Post

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Post Type
"""
type Post {
  """
  The ID of an object
  """
  id: ID!
  title: String
  body: String
}

type User {
  username: String!
  displayName: String
  birthday: String
  email: String!
  password: String!
}

type Mutation {
  CreatePost(input: CreatePostInput!): CreatePostPayload
  CreateUserMutation(input: CreateUserInput!): CreateUserPayload
  userLoginMutation(input: UserLoginInput!): UserLoginPayload
}

type CreatePostPayload {
  postEdge: PostEdge
  error: String
  success: String
  clientMutationId: String
}

input CreatePostInput {
  title: String!
  body: String!
  clientMutationId: String
}

type CreateUserPayload {
  token: String
  user: User
  clientMutationId: String
}

input CreateUserInput {
  username: String!
  displayName: String
  birthday: String
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginPayload {
  token: String
  user: User
  clientMutationId: String
}

input UserLoginInput {
  username: String!
  password: String!
  clientMutationId: String
}
